plugins {
    id 'java'
	id 'org.springframework.boot'
}

dependencies {
    implementation spring_boot_starter
    implementation spring_boot_starter_web
	implementation spring_boot_starter_webflux
    implementation spring_boot_starter_jdbc
    implementation spring_boot_starter_redis
    implementation commons_pool2
	
    // 打包时使用provide
//    providedRuntime spring_boot_starter_tomcat
    // 本地运行，否则异常：
    implementation spring_boot_starter_tomcat
    // 热部署工具
    implementation spring_boot_devtools
    // 系统监控
    implementation spring_boot_starter_actuator

	// GraphQL Java Engine itself is only concerned with executing queries. It doesn’t deal with any HTTP or JSON related topics.
//	implementation graphql_java
	// adapter which takes care of exposing our API via Spring Boot over HTTP.
//	implementation graphql_java_spring_boot_starter_webmvc
	// 可视化调试工具 graphiql
	implementation graphiql_spring_boot_starter
	implementation springfox_swagger2
	implementation springfox_swagger_ui
	
	implementation guava
	implementation commons_lang3
	implementation mysql_connector_java
	implementation freemarker
	implementation commons_io
	// jackson
	implementation jackson_databind
	implementation jackson_core
	implementation jackson_annotations

    testImplementation("org.springframework.boot:spring-boot-starter-test:${springBootVersion}") {
        exclude group: "org.junit.vintage", module: "junit-vintage-engine"
    }
}

bootJar.doFirst {
	def file = new File("$projectDir/src/main/resources/application.yml")
	//	TODO 可以考虑动态修改配置文件
}

jar {
	manifest {
		attributes "Manifest-Version": 1.0,
				   'Main-Class': 'cn.gyw.springboot.DemoBootApplication'
	}
}

task buildTestPackage(type: Zip, dependsOn: bootJar) {
	// println "rootDir >> $rootDir"
	// println "projectDir >> $projectDir"
	// println "jar path >> ${jar.archivePath}"
	// println "bootJar path >> ${bootJar.archivePath}"
	archiveFileName = 'springboot_' + new Date().format('yyyyMMddHHmm') + '.zip'
	destinationDirectory = file("$projectDir/build/release")

	from("$projectDir/src/main/resources/i18n") {
		into "i18n"
	}

	from(bootJar.archiveFile, "$projectDir/runtime/")
}