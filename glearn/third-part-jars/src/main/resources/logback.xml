<!--
scan: 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
scanPeriod: 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
debug: 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
-->
<configuration scan="true" scanPeriod="60 seconds" debug="false">
    <!--
    用来设置上下文名称，每个logger都关联到logger上下文，默认上下文名称为default
    -->
    <contextName>HibernateLearn</contextName>
    <!--
    用来定义变量值,使用方法：${}
    -->
    <property name="LOG_HOME" value="../logs/"/>
    <!--
    获取时间戳字符串
    key: 标识此<timestamp> 的名字；
    datePattern: 设置将当前时间（解析配置文件的时间）转换为字符串的模式，遵循java.txt.SimpleDateFormat的格式
    -->
    <timestamp key="bySecond" datePattern="yyyyMMdd'T'HHmmss"/>

    <!--
    负责写日志的组件
    name指定appender名称，class指定appender的全限定名
    -->
    <!-- ConsoleAppender类： 把日志输出到控制台 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <!-- 对日志进行格式化 -->
        <encoder>
            <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符-->
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger - %msg%n</pattern>
        </encoder>
        <!-- 字符串 : System.out(默认)或者System.err -->
        <!--<target>System.out</target>-->
    </appender>

    <!-- FileAppender类：把日志添加到文件 -->
    <appender name="FILE" class="ch.qos.logback.core.FileAppender">
        <!-- 被写入的文件目录，相对或者绝对目录 -->
        <file>${LOG_HOME}hibernate_study.log</file>
        <!-- 是否追加 -->
        <append>true</append>
        <!-- 日志格式化 -->
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
        </encoder>
        <!-- 是否写入安全 -->
        <prudent>false</prudent>
    </appender>

    <!-- RollingFileAppender类：把日志添加到滚动记录文件 -->
    <appender name="RFILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 被写入的文件目录，相对或者绝对目录 -->
        <file>${LOG_HOME}hibernate_study-rf.log</file>
        <!-- 是否追加 -->
        <append>true</append>
        <!-- 当发生滚动时，决定RollingFileAppender的行为，涉及文件移动和重命名
        属性class定义具体的滚动策略类
        -->
        <!-- 基于时间滚动策略 -->
        <!--<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">-->
        <!-- 文件名及“%d”转换符 -->
        <!--<fileNamePattern>logFile.%d{yyyy-MM-dd}.log</fileNamePattern>-->
        <!-- 控制保留的归档文件的最大数量，超出数量就删除旧文件 -->
        <!--<maxHistory>30</maxHistory>-->
        <!--</rollingPolicy>-->
        <!-- 基于文件大小滚动策略 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <!-- 超过指定大小文件滚动 -->
            <maxFileSize>10MB</maxFileSize>
        </rollingPolicy>
        <!--根据固定窗口算法重命名文件的滚动策略-->
        <!--
        <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
            <fileNamePattern>tests.%i.log.zip</fileNamePattern>
            <minIndex>1</minIndex>
            <maxIndex>3</maxIndex>
        </rollingPolicy>
        -->
        <encoder>
            <pattern>%-4relative [%thread] %-5level %logger{35} - %msg%n</pattern>
        </encoder>
    </appender>

    <!-- 根据不同的日志级别，输出到不同的日志文件中 -->
    <appender
            name="DebugLog"
            class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>DEBUG</level>  <!--//打印DEBUG-->
        </filter>
        <File>${LOG_HOME}debug.log</File>
        <rollingPolicy
                class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <FileNamePattern>${LOG_HOME}%d{yyyy-MM-dd}-debug.log</FileNamePattern>
        </rollingPolicy>
        <layout class="ch.qos.logback.classic.PatternLayout">
            <pattern>%date [%thread] %-5level %logger{80} - %msg%n</pattern>
        </layout>
    </appender>
    <appender
            name="InfoLog"
            class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>INFO</level>  <!--//打印DEBUG-->
        </filter>
        <File>${LOG_HOME}info.log</File>
        <rollingPolicy
                class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <FileNamePattern>${LOG_HOME}%d{yyyy-MM-dd}-info.log</FileNamePattern>
        </rollingPolicy>
        <layout class="ch.qos.logback.classic.PatternLayout">
            <pattern>%date [%thread] %-5level %logger{80} - %msg%n</pattern>
        </layout>
    </appender>
    <appender name="ErrorLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>ERROR</level>  <!--//打印error-->
            <level>WARN</level>
        </filter>
        <File>${LOG_HOME}err.log</File>
        <!--滚动策略-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--路径-->
            <fileNamePattern>${LOG_HOME}%d{yyyy-MM-dd}-err.log</fileNamePattern>
        </rollingPolicy>
        <layout class="ch.qos.logback.classic.PatternLayout">
            <pattern>%date [%thread] %-5level %logger{80} - %msg%n</pattern>
        </layout>
    </appender>

    <!-- 根loger,是所有<loger>的上级 -->
    <root level="INFO">
        <appender-ref ref="STDOUT" />
        <appender-ref ref="FILE" />
    </root>

    <!-- 设置某一个包或具体的某一个类的日志打印级别 -->
    <!--myibatis log configure-->
    <logger name="com.apache.ibatis" level="TRACE"/>
    <logger name="java.sql.Connection" level="DEBUG"/>
    <logger name="java.sql.Statement" level="DEBUG"/>
    <logger name="java.sql.PreparedStatement" level="DEBUG"/>

</configuration>